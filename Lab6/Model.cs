/* Lab Question  (Test 2)
 * 
 * A bottom-up approach is typically used in OOP languages. This is the general design approach that has been used
 * for this software. Do you think it would have been easier or harder to approach this project using a top-down approach?
 * Why do you think a bottom up approach is generally more natural when using OOP languages?
 *
 */

using System;
using System.Collections.Generic;

using Psim.ModelComponents;
using Psim.Materials;
using Psim.Exceptions;

namespace Psim
{
	// Model is comprised of a single material. Hardcoding the time step & number of phonons for now.
	class Model
	{
		private const double TIME_STEP = 5e-12;
		private const int NUM_PHONONS = 10000000;
		private Material material;
		private List<Cell> cells = new List<Cell>() { };
		private List<Sensor> sensors = new List<Sensor>() { };
		private readonly double highTemp;
		private readonly double lowTemp;
		private readonly double simTime;
		private readonly double tEq;

		public Model(Material material, double highTemp, double lowTemp, double simTime)
		{
			this.material = material;
			this.highTemp = highTemp;
			this.lowTemp = lowTemp;
			this.simTime = simTime;
			tEq = (highTemp + lowTemp) / 2;
		}

		public void AddSensor(int sensorID, double initTemp)
        {
			foreach (var sensor in sensors)
			{
				if (sensor.ID == sensorID)
					throw new ArgumentException($"Sensor ID: {sensorID} is already in use.");
			}

			sensors.Add(new Sensor(sensorID, this.material, initTemp));
        }
		public void AddCell(double length, double width, int sensorID)
        {
			if (cells.Count > 0)
			{
				if (cells[cells.Count - 1].Length != length || cells[cells.Count - 1].Width != width)
					throw new ArgumentException($"Cell Dimentions: Cell dimention doesn't match the following: length: {cells[cells.Count - 1].Length}, width: {cells[cells.Count - 1].Width}.");
			}

			foreach (var sensor in sensors)
			{
				if (sensor.ID == sensorID)
                {
					cells.Add(new Cell(length, width, sensor));
					sensor.AddToArea(cells[cells.Count-1].Area);
					return;
                }
			}

			throw new ArgumentException($"Sensor ID: {sensorID} is already in use.");
        }

		/// <summary>
		/// Automatically sets all the surfaces in the cells that constitute this model.
		/// Should be called after all the cells have been added
		/// </summary>
		/// <param name="tEq">The equilibrium temperature of the system</param>
		public void SetSurfaces(double tEq)
		{
			// TODO: Implemenent -> Assume that the system is linear!!
			int numCells = cells.Count;
			if (numCells < 2)
			{
				throw new InvalidCellCount($"{numCells}");
			}
			// Continue with implementation

			int count = 0;
			foreach(var cell in cells)
            {
				if (count == 0)
				{
					cell.SetEmitSurface(SurfaceLocation.left, highTemp);
					cell.SetTransitionSurface(SurfaceLocation.right, cells[count+1]);
				}
				else if(count == cells.Count)
                {
					cell.SetEmitSurface(SurfaceLocation.right, lowTemp);
					cell.SetTransitionSurface(SurfaceLocation.left, cells[count-1]);
                }
                else
                {
					cell.SetTransitionSurface(SurfaceLocation.left, cells[count-1]);
					cell.SetTransitionSurface(SurfaceLocation.right, cells[count+1]);
                }

				count++;
            }
		}

		/// <summary>
		/// Calibrates the emitting surfaces in the model.
		/// </summary>
		/// <param name="tEq">System equilibrium temperature</param>
		/// <param name="effEnergy">Phonon packet effective energy</param>
		/// <param name="timeStep">Simulation time step</param>
		public void SetEmitPhonons(double tEq, double effEnergy, double timeStep)
		{
			// TODO: Implement -> just need to call the appropriate method in each cell
			foreach(var cell in cells)
            {
				cell.SetEmitPhonons(tEq, effEnergy, timeStep);
            }
		}

		/// <summary>
		/// Returns the total energy of the model (initial energy + emit energy)
		/// </summary>
		/// <returns>Total energy generated by the model over the course of the simulation</returns>
		private double GetTotalEnergy()
		{
			// TODO: Implement -> just need to call the appropriate method in each cell
			double emitEngergy = 0;

			foreach (var cell in cells)
			{
				emitEngergy += cell.EmitEnergy(tEq, simTime) + cell.InitEnergy(tEq);
			}

			return emitEngergy;
		}
	}
}
